name: Create Github Tag and Release

on:
  workflow_run:
    workflows: ["Test, Lint, and Build"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  actions: read
  id-token: write

jobs:
  push-git-tag:
    if: ${{ github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.head_commit.message, 'Merge pull request') && contains(github.event.workflow_run.head_commit.message, 'release-v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: pyproject.toml

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Build package
        run: uv build

      - name: Extract version from branch name
        id: version
        run: |
          VERSION=$(echo "${{ github.event.workflow_run.head_commit.message }}" | grep -o 'release-v[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/release-v//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Create and push Github tag
        run: |
          echo "Creating tag v${{ steps.version.outputs.version }}"
          git tag -s "v${{ steps.version.outputs.version }}" -m "Release v${{ steps.version.outputs.version }}"
          echo "Pushing tag to origin..."
          git push origin "v${{ steps.version.outputs.version }}" 
          echo "Verifying tag was pushed:"
          git ls-remote --tags origin "v${{ steps.version.outputs.version }}"

      - name: Get tag name
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Using tag: $TAG"
      
      - name: Create Github Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
