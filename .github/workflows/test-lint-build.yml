name: Test, Lint, and Build

permissions:
  contents: write
  id-token: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-lint-build:
    name: Test, Lint, and Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
        id: setup-python

      - name: Get Python version from pyproject.toml
        id: pyproject-version
        run: |
          VERSION=$(grep "requires-python" pyproject.toml | sed 's/requires-python = ">=\(.*\)"/\1/')

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          cache-dependency-glob: pyproject.toml

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Install ruff
        run: uv pip install ruff

      - name: Run linting
        run: uv run ruff check .

      - name: Set tox environment name
        id: tox-env
        run: |
          TOX_ENV="py$(echo '${{ matrix.python-version }}' | sed 's/\.//')"
          echo "name=$TOX_ENV" >> $GITHUB_OUTPUT
          echo "Using tox environment: $TOX_ENV"

      - name: Debug environment (Python 3.13 only)
        if: matrix.python-version == '3.13'
        run: |
          echo "=== Python Version Details ==="
          python --version
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import platform; print('Platform:', platform.platform())"
          echo "=== Python Path ==="
          python -c "import sys; print('\\n'.join(sys.path))"
          echo "=== Installed packages ==="
          uv pip list | grep -E "(pytest|coverage|ruff|aiohttp|orjson|yarl|heroku)"
          echo "=== Test version loading ==="
          python -c "import heroku_applink; print('Version:', heroku_applink.__version__); print('Module path:', heroku_applink.__file__)"
          echo "=== Test importlib.metadata ==="
          python -c "import importlib.metadata; print('Metadata version:', importlib.metadata.version('heroku_applink'))" || echo "Failed to get metadata version"
          echo "=== Current working directory ==="
          pwd
          ls -la
          echo "=== Test directory ==="
          ls -la tests/

      - name: Run tests
        run: uv run tox -e ${{ steps.tox-env.outputs.name }} -v

      - name: Build package
        run: uv build

      - name: Upload artifacts for release
        if: ${{ matrix.python-version == steps.pyproject-version.outputs.version && github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release-v') }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: dist/
          retention-days: 90
